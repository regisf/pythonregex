// Generated by CoffeeScript 1.7.1
(function() {
  var ContactMessage, Model, cApplication, cMessageDialog, cModelAjax, cModelSocket, cObject, cOptionDialog, cOptionDialogModel, cUIView,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(function() {
    return $("[data-delete-confirm]").on('click', function() {
      var aElement, data;
      data = $(this).data('rel');
      aElement = $("[data-dialog-url]");
      return aElement.attr('href', (aElement.attr('href')) + data + '/');
    });
  });

  cApplication = (function() {
    function cApplication() {
      this.view = new cUIView;
      this.optionsDialog = new cOptionDialog;
      $("#src_evaluate").on('click', this.evaluate.bind(this));
      this.model = window.WebSocket ? new cModelSocket : new cModelAjax;
      this.model.connect(Model.Signals.SendError, (function(_this) {
        return function(msg) {
          return new cMessageDialog("Error", "Unable to connect the server " + msg);
        };
      })(this)).connect(Model.Signals.SendSuccess, (function(_this) {
        return function(data) {
          if (!data.success) {
            return new cMessageDialog("Error", data.error);
          } else {
            return $("#dest_result").html("<pre><code>" + data.content + "</code></pre>");
          }
        };
      })(this));
      this.contactDialog = new ContactMessage();
    }

    cApplication.prototype.getModel = function() {
      return this.model;
    };

    cApplication.prototype.evaluate = function() {
      var check, content, count, method, options, regex, sub, _i, _len, _ref;
      regex = $.trim($("#src_regex").val());
      content = $.trim($("#sourcetext").val());
      method = $("input[name=regex]:checked").val();
      options = [];
      if ($("#displaycommand").is("checked")) {
        options.push("displaycommand");
      }
      _ref = $("input[type=checkbox]:checked", "#regex_flags");
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        check = _ref[_i];
        options.push($(check).data('name'));
      }
      if (!regex.length) {
        return new cMessageDialog('Error', 'No regular expression entered');
      } else if (!content.length) {
        return new cMessageDialog('Error', "You must enter some text to evaluate");
      } else {
        sub = count = void 0;
        if ($("#sub").is(':checked')) {
          sub = $("input[name=replacement]").val();
        } else if ($("#subn").is(':checked')) {
          count = parseInt($("input[name=maxreplacement]").val());
          sub = $("input[name=subnreplacement]").val();
        } else if ($("#split").is(':checked')) {
          count = $("#maxsplit").is(':checked');
        }
        return this.model.sendRegex(regex, content, method, options, sub, count);
      }
    };

    return cApplication;

  })();

  $(function() {
    var app;
    $("#main").css("min-height", $(document).height() - $("footer#footer").height() - 70);
    return app = new cApplication;
  });


  /*
  Signal/Slot object
   */

  cObject = (function() {
    function cObject() {
      this.sig = [];
    }

    cObject.prototype.connect = function(signal, slot) {
      if (signal && slot) {
        this.sig.push({
          signal: signal,
          slot: slot
        });
      }
      return this;
    };

    cObject.prototype.emit = function(signal, args) {
      var ss, _i, _len, _ref;
      _ref = this.sig;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ss = _ref[_i];
        if (ss.signal === signal) {
          ss.slot(args);
        }
      }
      return this;
    };

    return cObject;

  })();

  ContactMessage = (function() {
    function ContactMessage() {
      this.validateForm = __bind(this.validateForm, this);
      var dialog;
      dialog = $("#contact");
      this.emailField = dialog.find("input[name=email]");
      this.nameField = dialog.find("input[name=name]");
      this.answerField = dialog.find("input[name=question]");
      this.messageField = dialog.find("textarea[name=message]");
      dialog.on('uk.modal.show', (function(_this) {
        return function() {
          _this.emailField.val("");
          _this.emailField.removeClass("uk-form-danger");
          _this.nameField.val("");
          _this.nameField.removeClass("uk-form-danger");
          _this.answerField.val("");
          _this.answerField.removeClass("uk-form-danger");
          _this.messageField.val("");
          return _this.messageField.removeClass("uk-form-danger");
        };
      })(this));
      dialog.find("[data-send]").on('click', this.validateForm);
    }

    ContactMessage.prototype.validateForm = function(e) {
      var error, formData;
      error = [];
      if ($.trim(this.emailField.val()).length === 0) {
        this.emailField.addClass("uk-form-danger");
        error.push("The email is empty");
      } else {
        this.emailField.removeClass("uk-form-danger");
      }
      if ($.trim(this.nameField.val()).length === 0) {
        this.nameField.addClass("uk-form-danger");
        error.push("The name is empty");
      } else {
        this.nameField.removeClass("uk-form-danger");
      }
      if ($.trim(this.answerField.val()).length === 0) {
        this.answerField.addClass("uk-form-danger");
        error.push("The answer is empty");
      } else if (this.answerField.val() !== $("#result").val()) {
        this.answerField.addClass("uk-form-danger");
        error.push("This isn't the good answer");
      } else {
        this.answerField.removeClass("uk-form-danger");
      }
      if ($.trim(this.messageField.val()).length === 0) {
        this.messageField.addClass("uk-form-danger");
        error.push("The message is empty");
      } else {
        this.messageField.removeClass("uk-form-danger");
      }
      if (error.length) {
        e.preventDefault();
        alert("There is one or more error\n\n" + error.join("\n"));
        return;
      }
      formData = new FormData(document.getElementById("contactform"));
      $.ajax({
        url: '/contact',
        type: 'POST',
        data: formData,
        processData: false,
        contentType: false,
        success: (function(_this) {
          return function(data) {
            var okModal, oldModal;
            if (data === 'ok') {
              oldModal = new $.UIkit.modal.Modal("#contact");
              oldModal.hide();
              okModal = new $.UIkit.modal.Modal("#send-success");
              return okModal.show();
            }
          };
        })(this),
        fail: (function(_this) {
          return function(xhr) {
            return alert(xhr.responseText);
          };
        })(this)
      });
    };

    return ContactMessage;

  })();

  cMessageDialog = (function() {
    function cMessageDialog(title, msg) {
      $("#messagedialog").find('[data-content]').html(msg);
      $("#messagedialog").find('[data-title]').html(title);
      new $.UIkit.modal.Modal("#messagedialog").show();
    }

    return cMessageDialog;

  })();

  cModelAjax = (function(_super) {
    __extends(cModelAjax, _super);

    function cModelAjax() {
      cModelAjax.__super__.constructor.call(this);
    }

    cModelAjax.prototype.sendRegex = function(regex, content, method, options, sub, count) {
      var data;
      data = {
        regex: regex,
        content: content,
        method: method,
        options: options,
        sub: sub || null,
        count: count || null
      };
      return $.getJSON('/wsa/', {
        json: JSON.stringify(data)
      }).fail((function(_this) {
        return function(xhr) {
          return _this.emit(Model.Signals.SendError, xhr.responseText);
        };
      })(this)).done((function(_this) {
        return function(data) {
          return _this.emit(Model.Signals.SendSuccess, data);
        };
      })(this));
    };

    return cModelAjax;

  })(cObject);

  cModelSocket = (function(_super) {
    __extends(cModelSocket, _super);

    function cModelSocket() {
      cModelSocket.__super__.constructor.call(this);
    }

    cModelSocket.prototype.sendRegex = function(regex, content, method, options, sub, count) {
      var data, socket;
      data = {
        regex: regex,
        content: content,
        method: method,
        options: options,
        flags: options,
        sub: sub || null,
        count: count || null
      };
      socket = new WebSocket('ws://localhost:8888/ws/');
      socket.onmessage = (function(_this) {
        return function(e) {
          return _this.emit(Model.Signals.SendSuccess, JSON.parse(e.data));
        };
      })(this);
      socket.onerror = (function(_this) {
        return function(e) {
          return _this.emit(Model.Signals.SendError, e);
        };
      })(this);
      return socket.onopen = (function(_this) {
        return function(e) {
          return socket.send(JSON.stringify(data));
        };
      })(this);
    };

    return cModelSocket;

  })(cObject);


  /*
  OptionDialogModel - Manage persistant options
   */

  cOptionDialogModel = (function() {
    function cOptionDialogModel() {
      var ls;
      this.evaluateOnChange = false;
      this.liveEvaluation = false;
      this.shortTag = false;
      this.tags = {
        debug: false,
        ignoreCase: false,
        multiline: false,
        dotAll: false,
        unicode: false,
        verbose: false
      };
      if (window.localStorage) {
        ls = window.localStorage;
        this.evaluateOnChange = ls.getItem('opt_change' === '1');
        this.liveEvaluation = ls.getItem('opt_typing' === '1');
        this.shortTag = ls.getItem('opt_short' === '1');
        this.tags.debug = ls.getItem('re_debug' === '1');
        this.tags.ignoreCase = ls.getItem('re_ignore' === '1');
        this.tags.multiline = ls.getItem('re_multiline' === '1');
        this.tags.dotAll = ls.getItem('re_dotall' === '1');
        this.tags.unicode = ls.getItem('re_unicode' === '1');
        this.tags.verbose = ls.getItem('re_verbose' === '1');
      }
    }

    cOptionDialogModel.prototype.change = function() {
      var ls;
      this.evaluateOnChange = $("#opt_change").is(':checked');
      this.liveEvaluation = $("#opt_typing").is(':checked');
      this.shortTag = $("#opt_short").is(':checked');
      this.tags.debug = $("#re_debug").is(':checked');
      this.tags.ignoreCase = $("#re_ignore").is(':checked');
      this.tags.multiline = $("#re_multiline").is(':checked');
      this.tags.dotAll = $("#re_dotall").is(':checked');
      this.tags.unicode = $("#re_unicode").is(':checked');
      this.tags.verbose = $("#re_verbose").is(':checked');
      if (window.localStorage) {
        ls = window.localStorage;
        ls.setItem('opt_change', this.evaluateOnChange === true ? '1' : '0');
        ls.setItem('opt_typing', this.liveEvaluation === true ? '1' : '0');
        ls.setItem('opt_short', this.shortTag === true ? '1' : '0');
        ls.setItem('re_debug', this.tags.debug === true ? '1' : '0');
        ls.setItem('re_ignore', this.tags.ignoreCase === true ? '1' : '0');
        ls.setItem('re_multiline', this.tags.multiline === true ? '1' : '0');
        ls.setItem('re_dotall', this.tags.dotAll === true ? '1' : '0');
        ls.setItem('re_unicode', this.tags.unicode === true ? '1' : '0');
        return ls.setItem('re_verbose', this.tags.verbose === true ? '1' : '0');
      }
    };

    return cOptionDialogModel;

  })();


  /*
  OptionDialog - Manage UIKit dialog box
   */

  cOptionDialog = (function() {
    function cOptionDialog() {
      this.model = new cOptionDialogModel;
      $("#options").on('click', '[data-ok]', this.model.change.bind(this.model));
      $("#options").on('uk-model-show', this.onOpen.bind(this));
    }

    cOptionDialog.prototype.onOpen = function() {
      $("#opt_change").attr('checked', this.model.evaluateOnChange);
      $("#opt_typing").attr('checked', this.model.liveEvaluation);
      $("#opt_short").attr('checked', this.model.shortTag);
      $("#re_debug").attr('checked', this.model.tags.debug);
      $("#re_ignore").attr('checked', this.model.tags.ignoreCase);
      $("#re_multiline").attr('checked', this.model.tags.multiline);
      $("#re_dotall").attr('checked', this.model.tags.dotAll);
      $("#re_unicode").attr('checked', this.model.tags.unicode);
      return $("#re_verbose").attr('checked', this.model.tags.verbose);
    };

    return cOptionDialog;

  })();


  /*
  This simply put in a namespace the model signals
   */

  Model = {
    Signals: {
      SendSuccess: 'model.success',
      SendError: 'model.error',
      SocketClosed: 'model.socketclosed'
    }
  };


  /*
  Class UIView
  This class handle all views on the screen.
  There's only one view because there isn't a lot of UIs
   */

  cUIView = (function() {
    function cUIView() {
      this.slideDown = true;
      this.storejQueryObjects();
      this.forceCheck();
      this.prepareUI();
      this.connectUI();
    }

    cUIView.prototype.forceCheck = function() {
      var checked, _i, _len, _ref, _results;
      _ref = $("input[type=radio]:checked");
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        checked = _ref[_i];
        switch (checked.getAttribute('id')) {
          case 'split':
            _results.push(this.displaySplitOptions());
            break;
          case 'sub':
            _results.push(this.displaySubOptions());
            break;
          case 'subn':
            _results.push(this.displaySubnOptions());
            break;
          case 'displaycommand':
            _results.push(this.displayCommandLine());
            break;
          default:
            _results.push(void 0);
        }
      }
      return _results;
    };

    cUIView.prototype.storejQueryObjects = function() {
      this.splitOptions = $("#splitoptions");
      this.subnOptions = $("#subnoptions");
      this.subOptions = $("#suboptions");
      this.inputRadioSplit = $("input#split");
      this.inputRadioSub = $("input#sub");
      this.inputRadioSubn = $("input#subn");
      this.inputFieldReplacement = $("input[name=replacement]");
      this.inputFieldSubnreplacement = $("input[name=subnreplacement]");
      this.inputFieldMaxreplacement = $("input[name=maxreplacement]");
      return this.inputFieldMaxsplit = $("input[name=maxsplit]");
    };

    cUIView.prototype.prepareUI = function() {
      this.splitOptions.hide();
      this.subnOptions.hide();
      return this.subOptions.hide();
    };

    cUIView.prototype.connectUI = function() {
      $("input[type=radio]").on({
        'click': function(e) {
          return $("[data-option]").hide();
        }
      });
      this.inputRadioSplit.on('click', this.displaySplitOptions.bind(this));
      this.inputRadioSub.on('click', this.displaySubOptions.bind(this));
      this.inputRadioSubn.on('click', this.displaySubnOptions.bind(this));
      return $("input#displaycommand").on('click', this.displayCommandLine.bind(this));
    };

    cUIView.prototype.displaySplitOptions = function(e) {
      this.inputFieldMaxsplit.val(0);
      return this.splitOptions.show();
    };

    cUIView.prototype.displaySubOptions = function(e) {
      this.inputFieldReplacement.val('');
      return this.subOptions.show();
    };

    cUIView.prototype.displaySubnOptions = function(e) {
      this.inputFieldSubnreplacement.val('');
      this.inputFieldMaxreplacement.val(0);
      return this.subnOptions.show();
    };

    cUIView.prototype.displayCommandLine = function(e) {
      if ($("#dest_result").html() !== 'Not yet evaluated') {
        $("#src_evaluate").trigger('click');
      }
      return null;
    };

    return cUIView;

  })();

}).call(this);
